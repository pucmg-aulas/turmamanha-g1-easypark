package UnitaryTests;

import Controllers.AddClienteController;
import Models.Cliente;
import dao.ClientebdDAO;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.swing.*;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;

class AddClienteControllerTest {
    
    private JDesktopPane desktopPane;
    private MockCadastroClienteView viewMock;
    private MockClientebdDAO daoMock;
    private AddClienteController controller;

    @BeforeEach
    void setUp() throws IOException {
        desktopPane = new JDesktopPane();
        viewMock = new MockCadastroClienteView();
        daoMock = MockClientebdDAO.getInstance();
        controller = new AddClienteController(desktopPane);
    }

    @Test
    void testAddClienteValid() {
        // Preenche campos válidos
        viewMock.getNome().setText("João Silva");
        viewMock.getCpf().setText("12345678900");

        // Simula o clique do botão confirmar
        viewMock.getBtnConfirmar().doClick();

        // Verifica se o cliente foi cadastrado corretamente
        Cliente clienteCadastrado = daoMock.getUltimoClienteCadastrado();
        assertNotNull(clienteCadastrado);
        assertEquals("João Silva", clienteCadastrado.getNome());
        assertEquals("12345678900", clienteCadastrado.getCpf());
    }

    @Test
    void testAddClienteInvalid() {
        // Deixa campos vazios
        viewMock.getNome().setText("");
        viewMock.getCpf().setText("");

        // Simula o clique do botão confirmar
        viewMock.getBtnConfirmar().doClick();

        // Verifica que nenhum cliente foi cadastrado
        assertNull(daoMock.getUltimoClienteCadastrado());
    }
    
    // Mock do CadastroClienteView
    static class MockCadastroClienteView extends CadastroClienteView {
        private JTextField nome = new JTextField();
        private JTextField cpf = new JTextField();
        private JButton btnConfirmar = new JButton();

        @Override
        public JTextField getNome() {
            return nome;
        }

        @Override
        public JTextField getCpf() {
            return cpf;
        }

        @Override
        public JButton getBtnConfirmar() {
            return btnConfirmar;
        }
    }

    // Mock do ClientebdDAO
    static class MockClientebdDAO extends ClientebdDAO {
        private Cliente ultimoClienteCadastrado;

        private MockClientebdDAO() {}

        private static MockClientebdDAO instance;

        public static MockClientebdDAO getInstance() {
            if (instance == null) {
                instance = new MockClientebdDAO();
            }
            return instance;
        }

        public void cadastrarCliente(Cliente cliente) {
            this.ultimoClienteCadastrado = cliente;
        }

        public Cliente getUltimoClienteCadastrado() {
            return ultimoClienteCadastrado;
        }
    }
}
