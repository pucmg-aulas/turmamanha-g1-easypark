package UnitaryTests;

import Controllers.AddEstacionamentoController;
import Models.Estacionamento;
import dao.EstacionamentobdDAO;
import dao.VagabdDAO;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.swing.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class AddEstacionamentoControllerTest {

    private CadastroEstacionamentoView mockView;
    private EstacionamentobdDAO mockEstacionamentoDao;
    private VagabdDAO mockVagasDao;
    private AddEstacionamentoController controller;


    @Test
    void testAddEstacionamentoSuccess() throws Exception {
        // Simula o comportamento esperado do DAO
        when(mockEstacionamentoDao.cadastrarEstacionamento(any(Estacionamento.class))).thenReturn(true);

        // Executa o método
        controller.addEstacionamento();

        // Verifica interações e comportamentos esperados
        verify(mockEstacionamentoDao, times(1)).cadastrarEstacionamento(any(Estacionamento.class));
        verify(mockVagasDao, times(1)).instanciarVagas(10);
        verify(mockView, times(1)).getTxtNomeEstacionamento();
        verify(mockView, times(1)).getSpnQntdVagasEstacionamento();
    }

    @Test
    void testAddEstacionamentoFailure() throws Exception {
        // Simula falha no DAO ao cadastrar estacionamento
        when(mockEstacionamentoDao.cadastrarEstacionamento(any(Estacionamento.class))).thenReturn(false);

        // Executa o método
        controller.addEstacionamento();

        // Verifica que o método foi chamado, mas nenhuma vaga foi instanciada
        verify(mockEstacionamentoDao, times(1)).cadastrarEstacionamento(any(Estacionamento.class));
        verify(mockVagasDao, times(0)).instanciarVagas(anyInt());
    }

    @Test
    void testLimparCampos() {
        // Configura os campos para valores iniciais
        JTextField nomeField = new JTextField("Teste");
        JTextField bairroField = new JTextField("Teste Bairro");
        JTextField ruaField = new JTextField("Teste Rua");
        JTextField numeroField = new JTextField("123");
        JSpinner spinner = new JSpinner();
        spinner.setValue(10);

        when(mockView.getTxtNomeEstacionamento()).thenReturn(nomeField);
        when(mockView.getTxtBairroEstacionamento()).thenReturn(bairroField);
        when(mockView.getTxtRuaEstacionamento()).thenReturn(ruaField);
        when(mockView.getTxtNumeroEstacionamento()).thenReturn(numeroField);
        when(mockView.getSpnQntdVagasEstacionamento()).thenReturn(spinner);

        // Executa o método de limpar campos
        controller.limparCampos();

        // Verifica se os campos foram limpos
        assertEquals("", nomeField.getText());
        assertEquals("", bairroField.getText());
        assertEquals("", ruaField.getText());
        assertEquals("", numeroField.getText());
        assertEquals(0, spinner.getValue());
    }
}

