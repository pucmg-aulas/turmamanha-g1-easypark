package UnitaryTests;

import Models.Cliente;
import Models.Veiculo;
import dao.ClientebdDAO;
import dao.VeiculoDAO;
import mock.MockClientebdDAO;
import mock.MockVeiculoDAO;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import view.CadastroVeiculoClienteView;

import javax.swing.JDesktopPane;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

class AddVeiculoControllerTest {

    private AddVeiculoController controller;
    private JDesktopPane desktopPane;
    private MockClientebdDAO mockClientes;
    private MockVeiculoDAO mockVeiculos;

    @BeforeEach
    void setUp() throws IOException {
        desktopPane = new JDesktopPane();
        mockClientes = new MockClientebdDAO();
        mockVeiculos = new MockVeiculoDAO();

        // Substituir os DAOs reais por mocks
        ClientebdDAO.setInstance(mockClientes);
        VeiculoDAO.setInstance(mockVeiculos);
    }

    @Test
    void testCadastrarVeiculoComSucesso() throws IOException {
        // Configurar um cliente existente no mock DAO
        String clienteCpf = "12345678900";
        Cliente cliente = new Cliente("João Silva", clienteCpf);
        mockClientes.cadastrarCliente(cliente);

        String placaVeiculo = "ABC-1234";
        String modeloVeiculo = "Modelo Teste";

        // Criar a view mockada e preencher os campos
        CadastroVeiculoClienteView viewMock = new CadastroVeiculoClienteView(desktopPane);
        viewMock.getPlaca().setText(placaVeiculo);
        viewMock.getModelo().setText(modeloVeiculo);

        // Inicializar o controlador com os mocks
        controller = new AddVeiculoController(desktopPane, clienteCpf, true);

        // Executar o cadastro
        boolean resultado = controller.cadastrarVeiculo();

        // Verificar se o cadastro foi realizado com sucesso
        assertTrue(resultado);
        assertEquals(1, mockVeiculos.getVeiculos().size());

        Veiculo veiculoCadastrado = mockVeiculos.getVeiculos().get(0);
        assertEquals(placaVeiculo, veiculoCadastrado.getPlaca());
        assertEquals(clienteCpf, veiculoCadastrado.getCliente().getCpf());
        assertEquals(modeloVeiculo, veiculoCadastrado.getModelo());
    }

    @Test
    void testCadastrarVeiculoComCamposVazios() throws IOException {
        String clienteCpf = "12345678900";
        Cliente cliente = new Cliente("João Silva", clienteCpf);
        mockClientes.cadastrarCliente(cliente);

        // Criar a view mockada e deixar os campos vazios
        CadastroVeiculoClienteView viewMock = new CadastroVeiculoClienteView(desktopPane);
        viewMock.getPlaca().setText("");
        viewMock.getModelo().setText("");

        // Inicializar o controlador com os mocks
        controller = new AddVeiculoController(desktopPane, clienteCpf, true);

        // Executar o cadastro
        boolean resultado = controller.cadastrarVeiculo();

        // Verificar que o cadastro falhou
        assertFalse(resultado);
        assertEquals(0, mockVeiculos.getVeiculos().size());
    }

    @AfterEach
    void tearDown() {
        desktopPane.removeAll();
    }
}

