package UnitaryTests;

import Controllers.MenuEstacionamentoController;
import dao.PagamentobdDAO;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import javax.swing.*;
import java.io.IOException;
import java.sql.SQLException;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.assertNotNull;


public class MenuEstacionamentoControllerTest {

    private JDesktopPane desktopPaneMock;
    private PagamentobdDAO pagamentoDaoMock;
    private MenuEstacionamentoController controller;
    private int idEstacionamento;

    @BeforeEach
    public void setUp() throws IOException, SQLException {
        desktopPaneMock = mock(JDesktopPane.class);
        pagamentoDaoMock = mock(PagamentobdDAO.class);
        idEstacionamento = 1; // ID fictício para teste

        // Mock do singleton do PagamentobdDAO
        Mockito.mockStatic(PagamentobdDAO.class);
        when(PagamentobdDAO.getInstance()).thenReturn(pagamentoDaoMock);

        controller = new MenuEstacionamentoController(desktopPaneMock, idEstacionamento);
    }

    @Test
    public void testExibirDetalhesBtnAction() throws IOException, SQLException {
        JButton exibirDetalhesBtn = controller.view.getExibirDetalhesBtn();

        // Simula o clique no botão
        exibirDetalhesBtn.doClick();

        // Verifica se o controlador correspondente foi criado
        assertNotNull(controller.exibirDetalhesController);
    }

    @Test
    public void testListarVagasBtnAction() throws IOException, SQLException {
        JButton listarVagasBtn = controller.view.getListarVagasBtn();

        // Simula o clique no botão
        listarVagasBtn.doClick();

        // Verifica se o controlador correspondente foi criado
        assertNotNull(controller.listarVagasController);
    }

    @Test
    public void testGerarCobrancaBtnAction() throws IOException, SQLException {
        JButton gerarCobrancaBtn = controller.view.getGerarCobrancaBtn();

        // Simula o clique no botão
        gerarCobrancaBtn.doClick();

        // Verifica se o controlador correspondente foi criado
        assertNotNull(controller.gerarCobrancaController);
    }

    @Test
    public void testPagarCobrancaBtnAction() throws IOException, SQLException {
        JButton pagarCobrancaBtn = controller.view.getPagarCobrancaBtn();

        // Mock para simular o comportamento de PagamentoDAO
        PagamentobdDAO pagamentoDAO = mock(PagamentobdDAO.class);
        when(pagamentoDAO.getHoraSaida()).thenReturn("2023-01-01T10:00:00");

        // Simula o clique no botão
        pagarCobrancaBtn.doClick();

        // Verifica se o controlador correspondente foi criado
        assertNotNull(controller.pagarCobrancaController);
    }

    @Test
    public void testValorArrecadadoBtnAction() {
        JButton valorArrecadadoBtn = controller.view.getValorArrecadadoBtn();

        // Simula o clique no botão
        valorArrecadadoBtn.doClick();

        // Verifica se o controlador correspondente foi criado
        assertNotNull(controller.valorArrecadadoController);
    }

    @Test
    public void testRelatoriosBtnAction() {
        JButton relatoriosBtn = controller.view.getRelatoriosBtn();

        // Simula o clique no botão
        relatoriosBtn.doClick();

        // Verifica se o controlador correspondente foi criado
        assertNotNull(controller.relatoriosController);
    }

    @Test
    public void testSairBtnAction() {
        JButton voltarBtn = controller.view.getVoltarBtn();

        // Simula o clique no botão
        voltarBtn.doClick();

        // Verifica se a view foi fechada
        verify(controller.view).dispose();
    }
}
