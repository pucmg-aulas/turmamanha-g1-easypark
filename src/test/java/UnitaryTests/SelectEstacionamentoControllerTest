package UnitaryTests;

import Controllers.SelectEstacionamentoController;
import Models.Estacionamento;
import dao.EstacionamentobdDAO;
import view.SelecionarEstacionamentoView;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.swing.*;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

import static org.mockito.Mockito.*;

public class SelectEstacionamentoControllerTest {

    private JDesktopPane desktopPaneMock;
    private SelecionarEstacionamentoView viewMock;
    private EstacionamentobdDAO estacionamentoDAOMock;
    private SelectEstacionamentoController controller;

    @BeforeEach
    public void setUp() throws IOException {
        desktopPaneMock = mock(JDesktopPane.class);
        viewMock = mock(SelecionarEstacionamentoView.class);
        estacionamentoDAOMock = mock(EstacionamentobdDAO.class);

        // Simula comportamento da view
        JComboBox<String> comboBoxMock = mock(JComboBox.class);
        when(viewMock.getListaEstacionamento()).thenReturn(comboBoxMock);

        // Cria a instância do controller com os mocks
        controller = new SelectEstacionamentoController(desktopPaneMock) {
            @Override
            public void listarEstacionamentos() {
                // Sobrescreve para não chamar métodos reais durante a configuração
            }
        };
    }

    @Test
public void testListarEstacionamentos_CarregarEstacionamentos() throws Exception {
    // Mocka a lista de estacionamentos retornada pelo DAO
    List<Estacionamento> estacionamentos = Arrays.asList(
            new Estacionamento(1, "Estacionamento A", "Rua A", "Bairro A", 100, 50),
            new Estacionamento(2, "Estacionamento B", "Rua B", "Bairro B", 200, 100)
    );
    when(estacionamentoDAOMock.listarEstacionamentos()).thenReturn(estacionamentos);

    // Chama o método listarEstacionamentos
    controller.listarEstacionamentos();

    // Verifica se os itens foram adicionados ao JComboBox
    JComboBox<String> comboBox = viewMock.getListaEstacionamento();
    verify(comboBox, times(1)).removeAllItems();
    verify(comboBox, times(estacionamentos.size())).addItem(anyString());
}


    @Test
    public void testSelecionarEstacionamento_ConfirmarSelecao() throws Exception {
        // Configura o JComboBox para retornar uma seleção válida
        JComboBox<String> comboBox = viewMock.getListaEstacionamento();
        when(comboBox.getSelectedItem()).thenReturn("1-Estacionamento A");

        // Simula o clique no botão confirmar
        JButton confirmButtonMock = mock(JButton.class);
        when(viewMock.getConfirmarButton()).thenReturn(confirmButtonMock);

        confirmButtonMock.doClick();

        // Verifica se o MenuEstacionamentoController foi chamado
        verify(viewMock, times(1)).dispose();
    }

    @Test
    public void testErroAoListarEstacionamentos() throws Exception {
        // Simula uma exceção ao listar estacionamentos
        when(estacionamentoDAOMock.listarEstacionamentos()).thenThrow(new SQLException("Erro no banco de dados"));

        // Chama o método listarEstacionamentos
        controller.listarEstacionamentos();

        // Verifica se a mensagem de erro foi exibida
        verify(viewMock, times(1)).getListaEstacionamento();
        verify(viewMock, times(1)).dispose();
    }
}
