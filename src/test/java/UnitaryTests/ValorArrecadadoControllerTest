package UnitaryTests;

import Controllers.ValorArrecadadoController;
import Models.Pagamento;
import dao.PagamentobdDAO;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import view.ValorArrecadadoView;

import javax.swing.*;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class ValorArrecadadoControllerTest {

    private JDesktopPane desktopPaneMock;
    private ValorArrecadadoView viewMock;
    private PagamentobdDAO pagamentosMock;
    private ValorArrecadadoController controller;

    private final int idEstacionamento = 1;

    @BeforeEach
    public void setUp() throws IOException, SQLException {
        desktopPaneMock = mock(JDesktopPane.class);
        viewMock = mock(ValorArrecadadoView.class);
        pagamentosMock = mock(PagamentobdDAO.class);

        // Mock para componentes da view
        JLabel valorTotalLabel = mock(JLabel.class);
        JLabel valorMedioLabel = mock(JLabel.class);
        JLabel valorMensalLabel = mock(JLabel.class);
        JComboBox<String> mesesComboBox = mock(JComboBox.class);

        when(viewMock.getValorTotal()).thenReturn(valorTotalLabel);
        when(viewMock.getValorMedio()).thenReturn(valorMedioLabel);
        when(viewMock.getValorMensal()).thenReturn(valorMensalLabel);
        when(viewMock.mesesAno()).thenReturn(mesesComboBox);

        // Configurar instância do DAO mockado
        PagamentobdDAO.setInstance(pagamentosMock);

        // Inicializar o controlador
        controller = new ValorArrecadadoController(desktopPaneMock, idEstacionamento) {
            protected ValorArrecadadoView criarView(JDesktopPane desktopPane) {
                return viewMock;
            }
        };
    }

    private Pagamento criarPagamento(int id, double valor, LocalDateTime dataPagamento, int idEstacionamento) throws IOException {
        Pagamento pagamento = new Pagamento();
        pagamento.setIdPagamento(id);
        pagamento.setValorPago(valor);
        pagamento.setDataPagamento(dataPagamento);
        pagamento.setIdEstacionamento(idEstacionamento);
        return pagamento;
    }

    @Test
    public void testExibirArrecadacaoTotal_ComPagamentos() throws SQLException, IOException {
        // Criar pagamentos
        Pagamento pagamento1 = criarPagamento(1, 50.0, LocalDateTime.now(), idEstacionamento);
        Pagamento pagamento2 = criarPagamento(2, 30.0, LocalDateTime.now(), idEstacionamento);
        List<Pagamento> pagamentos = Arrays.asList(pagamento1, pagamento2);

        when(pagamentosMock.getPagamentosPorEstacionamento(idEstacionamento)).thenReturn(pagamentos);

        // Executar o método
        double totalArrecadado = controller.exibirArrecadacaoTotal();

        // Verificar resultado
        assertEquals(80.0, totalArrecadado);
        verify(viewMock.getValorTotal()).setText("R$ 80.00");
    }

    @Test
    public void testExibirArrecadacaoTotal_SemPagamentos() throws SQLException, IOException {
        when(pagamentosMock.getPagamentosPorEstacionamento(idEstacionamento)).thenReturn(Arrays.asList());

        // Executar o método
        double totalArrecadado = controller.exibirArrecadacaoTotal();

        // Verificar resultado
        assertEquals(0.0, totalArrecadado);
        verify(viewMock.getValorTotal()).setText("Nenhum pagamento encontrado.");
    }

    @Test
    public void testExibirValorMedioUtilizacao_ComPagamentos() throws SQLException, IOException {
        // Criar pagamentos
        Pagamento pagamento1 = criarPagamento(1, 50.0, LocalDateTime.now(), idEstacionamento);
        Pagamento pagamento2 = criarPagamento(2, 30.0, LocalDateTime.now(), idEstacionamento);
        List<Pagamento> pagamentos = Arrays.asList(pagamento1, pagamento2);

        when(pagamentosMock.getPagamentosPorEstacionamento(idEstacionamento)).thenReturn(pagamentos);

        // Executar o método
        controller.exibirValorMedioUtilizacao();

        // Verificar resultado
        verify(viewMock.getValorMedio()).setText("R$ 40.00");
    }

    @Test
    public void testExibirValorMedioUtilizacao_SemPagamentos() throws SQLException, IOException {
        when(pagamentosMock.getPagamentosPorEstacionamento(idEstacionamento)).thenReturn(Arrays.asList());

        // Executar o método
        controller.exibirValorMedioUtilizacao();

        // Verificar resultado
        verify(viewMock.getValorMedio()).setText("Nenhum pagamento encontrado.");
    }

    @Test
    public void testExibirArrecadacaoMensal() throws SQLException, IOException {
        // Criar pagamentos
        Pagamento pagamento1 = criarPagamento(1, 50.0, LocalDateTime.of(2023, 5, 15, 10, 0), idEstacionamento);
        Pagamento pagamento2 = criarPagamento(2, 30.0, LocalDateTime.of(2023, 5, 20, 15, 0), idEstacionamento);
        Pagamento pagamento3 = criarPagamento(3, 40.0, LocalDateTime.of(2023, 6, 10, 12, 0), idEstacionamento);
        List<Pagamento> pagamentos = Arrays.asList(pagamento1, pagamento2, pagamento3);

        when(pagamentosMock.listarPagamentos()).thenReturn(pagamentos);
        when(viewMock.mesesAno().getSelectedItem()).thenReturn("5 - Maio");

        // Executar o método
        controller.exibirArrecadacaoMensal();

        // Verificar resultado
        verify(viewMock.getValorMensal()).setText("R$ 80.00");
    }
}
